<Window x:Class="WPF.FlowDocument"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="Документ нефиксированного формата" Height="300" Width="300">
    <FlowDocumentScrollViewer>
        <FlowDocument>
            <Paragraph TextIndent="20">UI(User Interface)</Paragraph>
            <Paragraph TextAlignment="Center">
                Интерфейс пользователя - эта та часть программы,
                <Span Background="Azure">которая</Span> находится у всех на виду. Некоторые
                <Span Background="Red">программисты</Span> склонны оставлять дизайн
                <Span Background="Blue">интерфейса</Span> пользователя на потом, считая, что реальное
                <Bold>достоинство</Bold> приложения - его программный код. Который и требует большего
                <Underline>внимания</Underline> . Однако часто возникает
                <Bold>недовольство</Bold> пользователей из-за неудачно
                <Underline>подобранных</Underline> шрифтов, непонятного содержимого экрана и
                <Underline>скорости</Underline> его прорисовывания, поэтому работу над интерфейсом также нужно воспринимать серьезно. Пользователь не видит, программного кода, зато интерфейс (хороший или плохой) всегда перед ним.
                Формы - это строительные
                <Bold>блоки</Bold> интерфейса пользователя. Хороший дизайн форм включает нечто большее, чем просто добавление элементов управления и программирование процедур обработки событии. Чтобы создать хорошо спроектированную форму, вы должны уяснить ее назначение, способ и время использования, а также ее связи с другими элементами программы. Кроме того в приложении может находиться несколько форм, каждая из которых будет отображаться по мере необходимости. Одни пользователи широко используют многозадачность Windows, другие предпочитают работать только с одним приложением. Необходимо помнить об этом во время разработки интерфейса пользователя (UI) Вы должны максимально реализовать все возможности Windows, чтобы пользователи с любыми навыками работы могли эффективно применять созданное вами приложение.

                Проектирование форм ввода данных
                Особый вид форм - формы, предназначенные для ввода данных. Они позволяют пользователь в нужном ему темпе, не оглядываясь на программиста. Общий смысл и основное правы: если пользователь собирается ввести в базу данных 10000 записей, вероятно, он не подтверждать ввод каждой записи. В форме ввода данных необходимо максимально использовать свободное пространство, поскольку открытие и закрытие дополнительных форм существенно замедляет работу. При разработке форм ввода данных основное внимание следует уделить скорости их работы. Чтобы максимально ускорить процесс ввода данных, следуйте приведенным ниже основным правилам.
            </Paragraph>
            <List MarkerStyle="Circle">
                <ListItem>
                    <Paragraph>
                        • Всегда назначайте клавиатурные эквиваленты команд; не требуйте обязательного использования мыши. (Кстати, этот совет хорош для всех форм программы, а не только для форм ввода данных.)
                    </Paragraph>
                </ListItem>
                <ListItem>
                    <Paragraph>
                        • Расположение элементов должно быть согласовано с задачами пользователя. Другими ело вами, не заставляйте пользователя перепрыгивать из раздела в раздел; при вводе информации это совсем не обязательно.
                    </Paragraph>
                </ListItem>
                <ListItem>
                    <Paragraph>
                        • Не заставляйте пользователя выполнять лишнюю работу. Другими словами, если информация, содержащаяся в полях со 2-го по 10-е, необходима только, когда первое поле имеет определенное значение, не нужно заставлять пользователя заполнять все поля подряд. же время, не ставьте работу формы в зависимость от содержимого отдельных полей. В противном случае это может существенно замедлить работу пользователя.
                    </Paragraph>
                </ListItem>
                <ListItem>
                    <Paragraph>
                        • Используйте заметную, но ненавязчивую обратную связь с пользователем. Хороший пример - работа редактора программного кода Visual Studio, который проверяет правильной написания переменных и констант.
                    </Paragraph>
                </ListItem>
                <ListItem>
                    <Paragraph>
                        • Если возможно, выполняйте добавление и редактирование записей в одной и той же форме, тогда пользователю не придется осваивать несколько методов доступа к одним и тем желанным.
                    </Paragraph>
                </ListItem>
            </List>
                <Paragraph TextAlignment="Center">
                Эффективные меню
                Еще одна важная часть разработки форм - создание содержательных и эффективных меню. Приведем некоторые важные рекомендации:
                • Следуйте стандартным соглашениям о расположении пунктов меню принятым в Windows File, Edit, View, и т.д.
                • Группируйте пункты меню в логическом порядке и по содержанию.
                • Для группировки пунктов в раскрывающихся меню используйте разделительные линии
                • Избегайте избыточных меню.
                • Избегайте пунктов меню верхнего уровня, не содержащих раскрывающихся меню
                • Не забывайте использовать символ троеточия для обозначения пунктов меню, активизирующих диалоговые окна.
                • Обязательно используйте клавиатурные эквиваленты команд и "горячие" клавиши.
                • Помещайте на панель инструментов часто используемые команды меню.
                Ощущение скорости
                Ощущение - это реальность. Здесь мы попытаемся объяснить, как ощущения пользователя могут повлиять на то, понравится ему ваша программа или нет. Простой пример - скорость работы приложения. У вас может быть самый быстродействующий программный код, но это ничего не значит, если с точки зрения пользователя он работает медленно. Когда пользователи жалуется на скорость, программисты защищаются, утверждая, что "пользователь не знает, что делает программа". Однако, если воспользоваться некоторыми уловками, то можно сделать та что будет казаться, будто программа работает быстрее.
                Пользователь гораздо более расположен к ожиданию, если считает, что компьютер работает с максимальной скоростью. Хороший пример- загрузка Windows, которая обычно требует достаточно много времени. Однако вывод графики, сопровождающие звуки, шум жесткого диска отвлекают настолько, что пользователь не ощущает ожидания. Описанная ниже техника поможет в создании "более быстрых" приложений.
                Информируйте пользователя о ходе процесса
                Когда есть видимость работы приложения, пользователи более легко переносят длительное ожидание в работе программы. Один из способов информирования пользователя о ходе выполнения работы - использовать в форме индикатор процесса. Если вы обновляете записи базы данных, можно использовать такой индикатор для отображения числа записей, над которыми операция уже произведена. Для этого добавьте пару строк кода обновляющих показания индикатора по мере перехода к следующим записям.
                Выводы по проектированию пользовательского интерфейса
                Хотя ни одно ухищрение не гарантирует создания удачного интерфейса пользователя, плохой интерфейс гарантирует отсутствие пользователей вашей программы. Однако при стремительном появлении новшеств, в сфере пользовательских интерфейсов, понятие "хорошего" интерфейса очень быстро изменяется. Возьмем, например, процесс настройки часов видеомагнитофона. Раньше часы программировали "вслепую" кнопками и переключателями, потом стали применяться дисплеи, для которых использовался экран телевизора, а теперь в некоторых моделях этот процесс выполняется автоматически по радиосигналу. Так и интерфейс пользователя программ будет "эволюционировать" по мере того как индустрия будет устанавливать новые стандарты, и вы, в свою очередь, должны быть всегда в курсе, как в наибольшей степени удовлетворить ожидания пользователя.
                Элементы управления:
                В народе называемые «контролами» играют одну из самой важной роли адаптации компьютеров к простым смертным. Раньше когда еще не было Windows, в компьютерах все управление выполнялось через разные аналоги DOS, другими словами задавалась команда и пускалась на выполнение. Это требовало больших усилий для людей которые не знакомы с компьютерами достаточно близко, им требовалось учить все эти текстовые команды что и делало возможным допускать к компьютерам только действительно обученных людей. Но с появлением Windows дела стали идти проще, теперь на экране появились интуитивно понятные кнопочки, поля вода, полоски загрузки, и тому подобное.
                В итоге понимаем что: без элементов управления уже не обойтись никак, потому как сейчас осталось очень мало любителей романтики ввода команд в консоль.
                Далее будем детально рассматривать каждый из элементов управления в WPF.
            </Paragraph>
        </FlowDocument>
    </FlowDocumentScrollViewer>
</Window>
